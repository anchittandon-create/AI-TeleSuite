// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/(main)/activity-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/activity-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/activity-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/batch-audio-downloader/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/batch-audio-downloader">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/batch-audio-downloader/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/call-scoring-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/call-scoring-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/call-scoring-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/call-scoring/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/call-scoring">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/call-scoring/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/clone-app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/clone-app">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/clone-app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/combined-call-analysis-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/combined-call-analysis-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/combined-call-analysis-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/combined-call-analysis/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/combined-call-analysis">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/combined-call-analysis/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/create-training-deck/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/create-training-deck">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/create-training-deck/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/data-analysis-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/data-analysis-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/data-analysis-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/data-analysis/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/data-analysis">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/data-analysis/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/home/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/home">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/home/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/knowledge-base-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/knowledge-base-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/knowledge-base-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/knowledge-base/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/knowledge-base">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/knowledge-base/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/n8n-workflow/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/n8n-workflow">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/n8n-workflow/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/pitch-generator/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/pitch-generator">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/pitch-generator/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/products/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/products">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/products/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/rebuttal-generator/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/rebuttal-generator">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/rebuttal-generator/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/replication-generator/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/replication-generator">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/replication-generator/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/sales-tools/pitch-generator/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/sales-tools/pitch-generator">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/sales-tools/pitch-generator/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/sales-tools/rebuttal-assistant/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/sales-tools/rebuttal-assistant">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/sales-tools/rebuttal-assistant/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/training-material-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/training-material-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/training-material-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/transcription-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/transcription-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/transcription-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/transcription/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/transcription">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/transcription/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/voice-sales-agent/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/voice-sales-agent">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/voice-sales-agent/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/voice-sales-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/voice-sales-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/voice-sales-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/voice-support-agent/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/voice-support-agent">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/voice-support-agent/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/voice-support-dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/voice-support-dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/voice-support-dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../src/app/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/clone-app/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/clone-app">> = Specific
  const handler = {} as typeof import("../../src/app/api/clone-app/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/clone-docs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/clone-docs">> = Specific
  const handler = {} as typeof import("../../src/app/api/clone-docs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/diagnose/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/diagnose">> = Specific
  const handler = {} as typeof import("../../src/app/api/diagnose/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/n8n-workflow/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/n8n-workflow">> = Specific
  const handler = {} as typeof import("../../src/app/api/n8n-workflow/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/transcription/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/transcription">> = Specific
  const handler = {} as typeof import("../../src/app/api/transcription/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/tts/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/tts">> = Specific
  const handler = {} as typeof import("../../src/app/api/tts/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/(main)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
